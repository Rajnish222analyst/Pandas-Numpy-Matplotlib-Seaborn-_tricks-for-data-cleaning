import pandas as pd   # import library
data = pd.read_csv("IPL.csv")   # read csv file
type(data)   #How to get type of data
output - pandas.core.frame.DataFrame
data.shape     # How to get shape of data
output - (629, 18)
data.describe()   # discriptive statistics of data 
Output -
id	season	dl_applied	win_by_runs	win_by_wickets	umpire3
count	629.000000	629.000000	629.000000	629.000000	629.000000	0.0
mean	316.825119	2012.473768	0.025437	13.793323	3.373609	NaN
std	184.069915	2.783830	0.157574	24.012044	3.424621	NaN
min	1.000000	2008.000000	0.000000	0.000000	0.000000	NaN
25%	158.000000	2010.000000	0.000000	0.000000	0.000000	NaN
50%	315.000000	2012.000000	0.000000	0.000000	4.000000	NaN
75%	479.000000	2015.000000	0.000000	20.000000	7.000000	NaN
max	636.000000	2017.000000	1.000000	146.000000	10.000000	NaN
data.columns         # how to get columns name
Output -
Index(['id', 'season', 'city', 'date', 'team1', 'team2', 'toss_winner',
       'toss_decision', 'result', 'dl_applied', 'winner', 'win_by_runs',
       'win_by_wickets', 'player_of_match', 'venue', 'umpire1', 'umpire2',
       'umpire3'],
      dtype='object')
data['winner']     # extracting single columns
Output -
data[['winner','toss_winner','city']]    # extracting multiple  columns
data.iloc[1]   # How to fetch row  
data.iloc[1:3]   # how to fetch multiple row
data.iloc[1:11:2]  # How to fetch alternate row data.iloc[start:stop:step]
mask=data['city']=='Hyderabad' 
data[mask]                       # Filtering on the basis of city (matches played in Hyderabad will come)
def get_city_match_count(city):
    mask=data['city']==city
    return data[mask].shape[0]    # using def function to make new function
get_city_match_count('city name')  # type city name in bracketyou will get total number of maches played there
mask1=data['city']=='Hyderabad'
mask2=data['date']>'01/01/2010'
data[mask1 & mask2]                # filtering on the basis of two condition
data['winner'].value_counts()       # using value_count to find number of matches win by each team
data.sort_values('city',ascending=True)           # using sort_values to get in ascending order for descending order type False in place of True 
data.drop_duplicates(subset=['city'])  # using drop_duplicate function to remove duplicate






